# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(COMMENT='//[^\\n\\r]*'), r(INT='[-+]?\\d+'), r(ID="[A-Za-z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'?"), r(W='\\s+'), l['='], l[':'], l['.'], l['->'], l[')'], l['('], ignores=['W', 'COMMENT'], reserved_map=ImmutableMap.from_dict({'let': 'quote let', '=': 'quote =', 'in': 'quote in', 'fun': 'quote fun', '->': 'quote ->', '(': 'quote (', ':': 'quote :', ')': 'quote )', 'some': 'quote some', '.': 'quote .', 'omit': 'quote omit', 'forall': 'quote forall'}), numbering={'BOF': 0, 'EOF': 1, 'quote let': 2, 'quote =': 3, 'quote in': 4, 'quote fun': 5, 'quote ->': 6, 'quote (': 7, 'quote :': 8, 'quote )': 9, 'quote some': 10, 'quote .': 11, 'quote omit': 12, 'quote forall': 13, 'COMMENT': 14, 'INT': 15, 'ID': 16, 'W': 17})



def mk_parser(ELet, EFun, EAnn, EApp, EInt, EVar, EOmit, tforall, tarrow, tapp, tpure, invoke, some):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_ann(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote : not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_ann__type(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                lcl_2 = EAnn(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_ann(_slot_0, prim__state, prim__tokens):
        lr_ann_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_ann(lr_ann_reduce, prim__state, prim__tokens)
        lr_ann_try = lcl_0
        lcl_0 = lr_ann_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_ann_try[1]
            lcl_1 = lcl_1
            lr_ann_reduce = lcl_1
            lcl_1 = lr_step_ann(lr_ann_reduce, prim__state, prim__tokens)
            lr_ann_try = lcl_1
            lcl_1 = lr_ann_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_ann_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_ann_try
        return lcl_0

    def lr_step_call__expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            lcl_1 = EApp(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_call__expr(_slot_0, prim__state, prim__tokens):
        lr_call__expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
        lr_call__expr_try = lcl_0
        lcl_0 = lr_call__expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_call__expr_try[1]
            lcl_1 = lcl_1
            lr_call__expr_reduce = lcl_1
            lcl_1 = lr_step_call__expr(lr_call__expr_reduce, prim__state, prim__tokens)
            lr_call__expr_try = lcl_1
            lcl_1 = lr_call__expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_call__expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_call__expr_try
        return lcl_0

    def lr_step_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_ID(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__0_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
        lr_rbnf__list__0_try = lcl_0
        lcl_0 = lr_rbnf__list__0_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__0_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__0_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
            lr_rbnf__list__0_try = lcl_1
            lcl_1 = lr_rbnf__list__0_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__0_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__0_try
        return lcl_0

    def lr_step_type__app(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atom__type(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            lcl_1 = tapp(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_type__app(_slot_0, prim__state, prim__tokens):
        lr_type__app_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_type__app(lr_type__app_reduce, prim__state, prim__tokens)
        lr_type__app_try = lcl_0
        lcl_0 = lr_type__app_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_type__app_try[1]
            lcl_1 = lcl_1
            lr_type__app_reduce = lcl_1
            lcl_1 = lr_step_type__app(lr_type__app_reduce, prim__state, prim__tokens)
            lr_type__app_try = lcl_1
            lcl_1 = lr_type__app_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_type__app_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_type__app_try
        return lcl_0

    def parse_ID(prim__state, prim__tokens):
        lcl_0 = 16
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'ID not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_1 = lcl_1.value
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_ann(prim__state, prim__tokens):
        lcl_0 = parse_call__expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_ann(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_ann__type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__list__0(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 11
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote . not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = _slot_1
                            lcl_7 = _slot_3
                            lcl_6 = some(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = []
                    lcl_5 = _slot_0
                    lcl_5 = invoke(lcl_5)
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 7):
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = []
                    lcl_5 = _slot_0
                    lcl_5 = invoke(lcl_5)
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = []
                    lcl_5 = _slot_0
                    lcl_5 = invoke(lcl_5)
                    lcl_4 = (lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'ann_type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'ann_type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_arrow__type(prim__state, prim__tokens):
        lcl_0 = parse_type__app(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 6):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_type(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_5 = tarrow(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'arrow_type got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 12):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = EOmit()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 9
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ) not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = int(lcl_3)
                lcl_3 = EInt(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = EVar(lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom__type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_type(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 9
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ) not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = tpure(lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom_type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom_type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_call__expr(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_call__expr(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 12):
                lcl_3 = parse_ann(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 3
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote = not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_expr(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_4 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote in not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = parse_expr(prim__state, prim__tokens)
                                _slot_5_check = lcl_7
                                lcl_7 = _slot_5_check[0]
                                lcl_7 = (lcl_7 is False)
                                if lcl_7:
                                    lcl_7 = _slot_5_check
                                else:
                                    lcl_8 = _slot_5_check[1]
                                    lcl_8 = lcl_8
                                    _slot_5 = lcl_8
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_10 = _slot_5
                                    lcl_10 = ELet(lcl_8, lcl_9, lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = (True, _slot_local__1)
                                    lcl_7 = lcl_10
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_param(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_3 = _slot_1_check[1]
                    lcl_3 = lcl_3
                    _slot_1 = lcl_3
                    lcl_3 = 6
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_3):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_3 = _py_local_tk
                    _slot_2 = lcl_3
                    lcl_3 = (_slot_2 is None)
                    if lcl_3:
                        lcl_4 = prim__tokens.offset
                        lcl_4 = (lcl_4, 'quote -> not match')
                        lcl_4 = prim__cons(lcl_4, prim__nil)
                        lcl_4 = lcl_4
                        lcl_4 = (False, lcl_4)
                        lcl_3 = lcl_4
                    else:
                        lcl_4 = parse_expr(prim__state, prim__tokens)
                        _slot_3_check = lcl_4
                        lcl_4 = _slot_3_check[0]
                        lcl_4 = (lcl_4 is False)
                        if lcl_4:
                            lcl_4 = _slot_3_check
                        else:
                            lcl_5 = _slot_3_check[1]
                            lcl_5 = lcl_5
                            _slot_3 = lcl_5
                            lcl_5 = _slot_1
                            lcl_6 = _slot_3
                            lcl_5 = EFun(lcl_5, lcl_6)
                            _slot_local__1 = lcl_5
                            lcl_5 = (True, _slot_local__1)
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    lcl_10 = lcl_3
                lcl_1 = lcl_10
            elif (lcl_2 == 7):
                lcl_10 = parse_ann(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = _slot_0
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_10 = lcl_3
                lcl_1 = lcl_10
            elif (lcl_2 == 15):
                lcl_10 = parse_ann(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = _slot_0
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_10 = lcl_3
                lcl_1 = lcl_10
            elif (lcl_2 == 16):
                lcl_10 = parse_ann(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = _slot_0
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_10 = lcl_3
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'expr lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_param(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 8
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote : not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_ann__type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = 9
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_4 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ) not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_1
                                lcl_8 = _slot_3
                                lcl_7 = (lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_ID(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    lcl_4 = (lcl_4, None)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'param lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'param got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__0(prim__state, prim__tokens):
        lcl_0 = parse_ID(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__0(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_type(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__list__0(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 11
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote . not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = parse_type(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = _slot_1
                            lcl_7 = _slot_3
                            lcl_6 = tforall(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 7):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                lcl_3 = parse_arrow__type(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'type lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'type got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_type__app(prim__state, prim__tokens):
        lcl_0 = parse_atom__type(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_type__app(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
